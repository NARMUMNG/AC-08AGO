<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Canvas</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
        }
        #controls {
            margin-bottom: 20px;
        }
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id="controls">
        <label for="shape">Selecciona una forma:</label>
        <select id="shape">
            <option value="rectangle">Rectángulo</option>
            <option value="circle">Círculo</option>
        </select>
        <button id="clear">Limpiar Canvas</button>
        <br><br>
        <label for="scale">Escala:</label>
        <input type="number" id="scale" value="1" step="0.1">
        <label for="rotation">Rotación (grados):</label>
        <input type="number" id="rotation" value="0">
        <label for="translateX">Traslación X:</label>
        <input type="number" id="translateX" value="0">
        <label for="translateY">Traslación Y:</label>
        <input type="number" id="translateY" value="0">
    </div>
    <canvas id="canvas" width="800" height="600"></canvas>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const shapeSelect = document.getElementById('shape');
        const clearButton = document.getElementById('clear');
        const scaleInput = document.getElementById('scale');
        const rotationInput = document.getElementById('rotation');
        const translateXInput = document.getElementById('translateX');
        const translateYInput = document.getElementById('translateY');

        let currentShape = 'rectangle';
        let shapes = [];

        shapeSelect.addEventListener('change', (e) => {
            currentShape = e.target.value;
        });

        canvas.addEventListener('click', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            let shape;
            if (currentShape === 'rectangle') {
                shape = {
                    type: 'rectangle',
                    x,
                    y,
                    width: 100,
                    height: 50,
                    scale: parseFloat(scaleInput.value),
                    rotation: parseFloat(rotationInput.value),
                    translateX: parseFloat(translateXInput.value),
                    translateY: parseFloat(translateYInput.value)
                };
            } else if (currentShape === 'circle') {
                shape = {
                    type: 'circle',
                    x,
                    y,
                    radius: 50,
                    scale: parseFloat(scaleInput.value),
                    rotation: parseFloat(rotationInput.value),
                    translateX: parseFloat(translateXInput.value),
                    translateY: parseFloat(translateYInput.value)
                };
            }

            shapes.push(shape);
            drawShapes();
        });

        function drawShapes() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            shapes.forEach((shape) => {
                ctx.save();

                // Aplicar traslación
                ctx.translate(shape.x + shape.translateX, shape.y + shape.translateY);

                // Aplicar rotación
                ctx.rotate(shape.rotation * Math.PI / 180);

                // Aplicar escalado
                ctx.scale(shape.scale, shape.scale);

                // Dibujar la forma
                ctx.beginPath();
                if (shape.type === 'rectangle') {
                    ctx.rect(-shape.width / 2, -shape.height / 2, shape.width, shape.height);
                } else if (shape.type === 'circle') {
                    ctx.arc(0, 0, shape.radius, 0, Math.PI * 2);
                }

                ctx.fillStyle = 'rgba(0, 100, 255, 0.3)';
                ctx.fill();
                ctx.strokeStyle = 'black';
                ctx.stroke();

                ctx.restore();
            });
        }

        clearButton.addEventListener('click', () => {
            shapes = [];
            drawShapes();
        });
    </script>
</body>
</html>

